{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pinduca/\\xC1rea de Trabalho/NLW-4-react/moveit/src/contexts/CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nlet countdownTimeout;\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountDown() {\n    setIsActive(true);\n  }\n\n  function resetCountDown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountDown,\n      resetCountDown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/pinduca/Área de Trabalho/NLW-4-react/moveit/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountDown","resetCountDown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAkBA,IAAIC,gBAAJ;AAEA,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAE,EAAF,CAAtC;AAEP,OAAO,SAASO,iBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AAGrE,QAAM;AAAGC,IAAAA;AAAH,MAAyBR,UAAU,CAACG,iBAAD,CAAzC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAmBR,QAAQ,CAAC,MAAM,EAAP,CAAjC;AACA,QAAM;AAAA,OAAES,QAAF;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAAEW,WAAF;AAAA,OAAeC;AAAf,MAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAAyB;AACrBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAAyB;AACrBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH;;AAEDb,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGU,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAwB;AACpBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,MAAI;AAC9BZ,QAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACH,OAF4B,EAE3B,IAF2B,CAA7B;AAGH,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA2B;AAC9BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAVQ,EAUP,CAACG,QAAD,EAAWF,IAAX,CAVO,CAAT;AAYA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAD8B;AAE9BG,MAAAA,OAF8B;AAG9BL,MAAAA,WAH8B;AAI9BF,MAAAA,QAJ8B;AAK9BQ,MAAAA,cAL8B;AAM9BC,MAAAA;AAN8B,KAAlC;AAAA,cAQKb;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\n\n\ninterface CountdownContextData{\n    minutes: number,\n    seconds: number,\n    hasFinished:boolean ,\n    isActive: boolean,\n    startCountDown: ()=>void,\n    resetCountDown: ()=> void\n\n\n}\n\ninterface CountdownProviderProps{\n    children: ReactNode\n}\n\nlet countdownTimeout: NodeJS.Timeout;\n\nexport const CountdownContext = createContext( {} as CountdownContextData);\n\nexport function CountdownProvider( { children }: CountdownProviderProps ){\n    \n    \n    const {  startNewChallenge } = useContext(ChallengesContext);\n\n    const [time, setTime ] = useState(0.1 * 60);\n    const [ isActive, setIsActive ] = useState(false);\n    const [ hasFinished, setHasFinished ] = useState(false);\n\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n\n    function startCountDown(){\n        setIsActive(true);\n    }\n\n    function resetCountDown(){\n        clearTimeout(countdownTimeout);\n        setIsActive(false);\n        setTime(0.1 * 60);\n        setHasFinished(false);\n    }\n\n    useEffect(()=>{\n        if(isActive && time > 0){\n            countdownTimeout = setTimeout(()=>{\n                setTime(time-1);\n            },1000)\n        } else if (isActive && time === 0){\n            setHasFinished(true);\n            setIsActive(false);\n            startNewChallenge();\n        }\n    },[isActive, time] )\n    \n    return(\n        <CountdownContext.Provider value={{\n            minutes,\n            seconds,\n            hasFinished,\n            isActive,\n            startCountDown,\n            resetCountDown\n        }}>\n           { children } \n        </CountdownContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}