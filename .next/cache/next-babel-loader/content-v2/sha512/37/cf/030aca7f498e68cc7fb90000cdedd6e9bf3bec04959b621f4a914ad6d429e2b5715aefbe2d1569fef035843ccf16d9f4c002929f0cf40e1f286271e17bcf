{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pinduca/\\xC1rea de Trabalho/NLW-4-react/moveit/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(currentExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/pinduca/Área de Trabalho/NLW-4-react/moveit/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAG5CJ,QAAQ,CAAC,CAAD,CAHoC;AAAA,MAG/DK,KAH+D;AAAA,MAGxDC,QAHwD;;AAAA,mBAIpBN,QAAQ,CAAC,CAAD,CAJY;AAAA,MAI/DO,iBAJ+D;AAAA,MAI5CC,oBAJ4C;;AAAA,mBAKhBR,QAAQ,CAAC,CAAD,CALQ;AAAA,MAK/DS,mBAL+D;AAAA,MAK1CC,sBAL0C;;AAAA,mBAOxBV,QAAQ,CAAC,IAAD,CAPgB;AAAA,MAO/DW,eAP+D;AAAA,MAO9CC,kBAP8C;;AAStE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAC,CAAP,IAAY,CAArB,EAAwB,CAAxB,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AACdV,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA4B;AAExB,QAAG,CAACb,eAAJ,EAAoB;AAChB;AACH;;AAJuB,QAKhBc,MALgB,GAKLd,eALK,CAKhBc,MALgB;AAOxB,QAAIC,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;;AAEA,QAAIC,eAAe,IAAIb,qBAAvB,EAA6C;AACzCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAACD,iBAAD,CAApB;AACAK,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAEC;;AAEL,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EACjC;AACAJ,MAAAA,KAAK,EAALA,KADA;AAEAE,MAAAA,iBAAiB,EAAjBA,iBAFA;AAGAE,MAAAA,mBAAmB,EAAnBA,mBAHA;AAIAO,MAAAA,OAAO,EAAPA,OAJA;AAKAC,MAAAA,iBAAiB,EAAjBA,iBALA;AAMAN,MAAAA,eAAe,EAAfA,eANA;AAOAY,MAAAA,cAAc,EAAdA,cAPA;AAQAV,MAAAA,qBAAqB,EAArBA,qBARA;AASAW,MAAAA,iBAAiB,EAAjBA;AATA,KADA;AAAA,cAaKpB;AAbL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GA/DeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge{\n    type: 'body' | 'eye',\n    description: string,\n    amount: number\n}\n\ninterface ChallengesContextData{\n    level: number,\n    currentExperience: number, \n    challengesCompleted: number, \n    levelUp: () => void,\n    startNewChallenge: ()=> void ,\n    activeChallenge: Challenge,\n    resetChallenge: ()=> void,\n    experienceToNextLevel: number,\n    completeChallenge: ()=> void\n}\n\ninterface ChallengesProviderProps{\n    children: ReactNode\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData );\n\nexport function ChallengesProvider({ children } : ChallengesProviderProps){\n\n\n    const [level, setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n    const [activeChallenge, setActiveChallenge] = useState(null);\n    \n    const experienceToNextLevel = Math.pow((level+1) * 4, 2)\n\n    function levelUp(){\n        setLevel(level+1);\n    }\n\n    function startNewChallenge(){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n        const challenge = challenges[randomChallengeIndex];\n        \n        setActiveChallenge(challenge);\n    }\n\n    function resetChallenge(){\n        setActiveChallenge(null);\n    }\n\n    function completeChallenge(){\n\n        if(!activeChallenge){\n            return;\n        }\n        const { amount } = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if (finalExperience >= experienceToNextLevel){\n            finalExperience = finalExperience - experienceToNextLevel;\n            levelUp();\n        }\n\n        setCurrentExperience(currentExperience);\n        setActiveChallenge(null);\n        setChallengesCompleted(challengesCompleted + 1);\n\n        }\n\n    return(\n        <ChallengesContext.Provider value={ \n        { \n        level,\n        currentExperience, \n        challengesCompleted, \n        levelUp,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        experienceToNextLevel,\n        completeChallenge\n        } \n        }>\n            {children}\n        </ChallengesContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}